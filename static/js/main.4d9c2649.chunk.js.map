{"version":3,"sources":["components/NavBar.js","components/Tile.js","components/GameBoard.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","props","react_default","a","createElement","className","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","currentScore","highScore","styles","card","minHeight","Tile","style","src","image","data-id","dataId","alt","concat","make","model","onClick","GameBoard","imgDisplayOrder","map","carId","components_Tile","key","cars","id","handleClick","App","state","selectedImgIds","currentCarId","shuffle","j","x","i","length","Math","floor","random","rndDisplayOrder","shuffCars","_this","newOrder","push","setState","e","console","log","target","getAttribute","imgSelectedId","imgSelectedPrev","includes","alert","selectedImgId","this","components_NavBar","components_GameBoard","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4d9c2649.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nfunction NavBar(props) {\r\n    return (\r\n        <nav className=\"container-fluid bg-light mb-5\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-4\">\r\n                    <a className=\"navbar-brand\" href=\"/\">Cars Memory Game</a>\r\n                    <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                        <span className=\"navbar-toggler-icon\"></span>\r\n                    </button>\r\n                </div>\r\n\r\n                <div className=\"col-md-4\">\r\n                    <h3 className=\"text-center\">Click a tile to begin!</h3>\r\n                </div>\r\n\r\n                <div className=\"col-md-4\">\r\n                    <h3 className=\"text-right\">Current Score: {props.currentScore} | High Score: {props.highScore}</h3>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default NavBar","import React from \"react\"\r\n\r\nconst styles = {\r\n    card: {\r\n        minHeight: \"200px\"\r\n    }\r\n}\r\n\r\nfunction Tile(props) {\r\n    return (\r\n        <div className=\"col-md-3\">\r\n            <div className=\"card text-white bg-light mb-4\" style={styles.card}>\r\n                <img src={props.image} data-id={props.dataId} className=\"card-img my-auto\" alt={`${props.make} ${props.model}`} onClick={props.onClick} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Tile","import React from \"react\"\r\n// import cars from \"../cars.json\"\r\nimport Tile from \"./Tile\"\r\n\r\nfunction GameBoard(props) {\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                {props.imgDisplayOrder.map(carId => (\r\n                    <Tile\r\n                        key={carId}\r\n                        dataId={props.cars[carId].id}\r\n                        onClick={props.handleClick}\r\n                        image={props.cars[carId].image}\r\n                        make={props.cars[carId].make}\r\n                        model={props.cars[carId].model} />\r\n                ))}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GameBoard","import React, { Component } from 'react';\nimport './App.css';\nimport NavBar from './components/NavBar'\nimport GameBoard from './components/GameBoard';\nimport cars from \"./cars.json\"\n\nclass App extends Component {\n  state = {\n    selectedImgIds: [],\n    imgDisplayOrder: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],\n    currentCarId: 0,\n    currentScore: 0,\n    highScore: 0\n  }\n\n  componentDidMount() {\n    this.rndDisplayOrder()\n  }\n\n  shuffle = (a) => {\n    let j, x, i;\n    for (i = a.length - 1; i > 0; i--) {\n      j = Math.floor(Math.random() * (i + 1));\n      x = a[i];\n      a[i] = a[j];\n      a[j] = x;\n    }\n    return a;\n  }\n\n  rndDisplayOrder = () => {\n    let shuffCars = this.shuffle(cars)\n    let newOrder = []\n    for (let i = 0; i < 12; i++) {\n      newOrder.push(shuffCars[i].id)\n    }\n    this.setState({ imgDisplayOrder: newOrder })\n  }\n\n  handleClick = (e) => {\n    // need to be able to grab the key from the clicked tile. \n    // if statement or ternary statement to handle if image has been clicked or not   \n    console.log(e.target)\n    console.log(e.target.getAttribute(\"data-id\"))\n\n    const imgSelectedId = e.target.getAttribute(\"data-id\")\n    const imgSelectedPrev = this.state.selectedImgIds.includes(e.target.getAttribute(\"data-id\"))\n\n    console.log(this.state.selectedImgIds)\n    console.log(imgSelectedPrev)\n\n    if (imgSelectedPrev) {\n      alert(`Game Over!\\n\\nYou have already selected the ${e.target.getAttribute(\"alt\")}.\\n\\nClick \"OK\" to play again!`)\n      this.rndDisplayOrder()\n      this.setState({\n        currentScore: 0,\n        selectedImgIds: []\n      })\n    } else {\n      if (this.state.currentScore < this.state.highScore) {\n        this.rndDisplayOrder()\n        this.setState({\n          currentScore: this.state.currentScore + 1,\n          selectedImgId: this.state.selectedImgIds.push(imgSelectedId)\n        })\n      } else {\n        this.rndDisplayOrder()\n        this.setState({\n          currentScore: this.state.currentScore +1,\n          highScore: this.state.highScore + 1,\n          selectedImgId: this.state.selectedImgIds.push(imgSelectedId)\n        })\n      }\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <NavBar currentScore={this.state.currentScore} highScore={this.state.highScore} />\n        <GameBoard\n          imgDisplayOrder={this.state.imgDisplayOrder}\n          cars={cars}\n          handleClick={this.handleClick}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}